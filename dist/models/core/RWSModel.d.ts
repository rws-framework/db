import { IModel } from '../interfaces/IModel';
import { IRWSModelServices } from '../interfaces/IRWSModelServices';
import { OpModelType } from '../interfaces/OpModelType';
import { FindByType, IPaginationParams } from '../../types/FindParams';
import { DBService } from '../../services/DBService';
declare class RWSModel<ChildClass> implements IModel {
    static services: IRWSModelServices;
    [key: string]: any;
    id: string;
    static _collection: string;
    static _RELATIONS: {};
    static _BANNED_KEYS: string[];
    static allModels: OpModelType<any>[];
    static _CUT_KEYS: string[];
    constructor(data: any);
    checkForInclusionWithThrow(): void;
    static checkForInclusionWithThrow(this: OpModelType<any>, checkModelType: string): void;
    checkForInclusion(): boolean;
    static checkForInclusion(this: OpModelType<any>, checkModelType: string): boolean;
    protected _fill(data: any): RWSModel<ChildClass>;
    protected hasRelation(key: string): boolean;
    protected bindRelation(key: string, relatedModel: RWSModel<any>): {
        connect: {
            id: string;
        };
    };
    _asyncFill(data: any, fullDataMode?: boolean, allowRelations?: boolean): Promise<ChildClass>;
    private getModelScalarFields;
    private getRelationOneMeta;
    static getRelationOneMeta(model: any, classFields: string[]): Promise<import("..").RelOneMetaType<import("../..").IRWSModel>>;
    private getRelationManyMeta;
    static getRelationManyMeta(model: any, classFields: string[]): Promise<import("..").RelManyMetaType<import("../..").IRWSModel>>;
    static paginate<ChildClass extends RWSModel<ChildClass>>(this: OpModelType<any>, pageParams: IPaginationParams, findParams?: FindByType): Promise<RWSModel<ChildClass>[]>;
    toMongo(): Promise<any>;
    getCollection(): string | null;
    static getCollection(): string | null;
    save(): Promise<this>;
    static getModelAnnotations<T extends unknown>(constructor: new () => T): Promise<Record<string, {
        annotationType: string;
        metadata: any;
    }>>;
    preUpdate(): void;
    postUpdate(): void;
    preCreate(): void;
    postCreate(): void;
    static isSubclass<T extends RWSModel<T>, C extends new () => T>(constructor: C, baseClass: new () => T): boolean;
    hasTimeSeries(): boolean;
    static checkTimeSeries(constructor: any): boolean;
    isDbVariable(variable: string): Promise<boolean>;
    static checkDbVariable(constructor: any, variable: string): Promise<boolean>;
    sanitizeDBData(data: any): any;
    static watchCollection<ChildClass extends RWSModel<ChildClass>>(this: OpModelType<ChildClass>, preRun: () => void): Promise<any>;
    static findOneBy<ChildClass extends RWSModel<ChildClass>>(this: OpModelType<ChildClass>, findParams?: FindByType): Promise<ChildClass | null>;
    static find<ChildClass extends RWSModel<ChildClass>>(this: OpModelType<ChildClass>, id: string, findParams?: Omit<FindByType, 'conditions'>): Promise<ChildClass | null>;
    static findBy<ChildClass extends RWSModel<ChildClass>>(this: OpModelType<ChildClass>, findParams?: FindByType): Promise<ChildClass[]>;
    static delete<ChildClass extends RWSModel<ChildClass>>(this: OpModelType<ChildClass>, conditions: any): Promise<void>;
    delete<ChildClass extends RWSModel<ChildClass>>(): Promise<void>;
    static create<T extends RWSModel<T>>(this: new () => T, data: any): Promise<T>;
    static loadModels(): OpModelType<any>[];
    loadModels(): OpModelType<any>[];
    private checkRelEnabled;
    static setServices(services: IRWSModelServices): void;
    getDb(): DBService;
}
export { RWSModel };
